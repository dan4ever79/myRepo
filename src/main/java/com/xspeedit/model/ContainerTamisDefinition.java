package com.xspeedit.model;

/**
 * Class that define the best optimisation regarding size item (size item should be int)
 */
public final class ContainerTamisDefinition {


    public final static String [] DEFINITIONS =
            new String [] {
                    //  "987654321",
                    // Somme optimise = 10
                    "100000001",    // 9 et 1
                    "010000010",    // 8 et 2
                    "010000002",    // 8 et 1 et 1

                    "001000100",    // 7 et 3
                    "001000011",    // 7 et 2 et 1
                    "001000003",    // 7 et 1 et 1 et 1

                    "000101000",    // 6 et 4
                    "000100101",    // 6 et 3 et 1
                    "000100020",    // 6 et 2 et 2
                    "000100012",    // 6 et 2 et 1 et 1
                    "000100004",    // 6 et 1 * 4

                    "000020000",    // 5 et 5
                    "000011001",    // 5 et 4 et 1
                    "000010110",    // 5 et 3 et 2
                    "000010102",    // 5 et 3 et 1 et 1
                    "000010003",    // 5 et 2 et 1 et 1 et 1

                    "000002010",    // 4 et 4 et 2
                    "000002002",    // 4 et 4 et 1 et 1
                    "000001111",    // 4 et 3 et 2 et 1
                    "000001103",    // 4 et 3 et 1 et 1 et 1

                    "000000301",    // 3 et 3 et 3 et 1
                    "000000220",    // 3 et 3 et 2 et 2
                    "000000212",    // 3 et 3 et 2 et 1 et 1
                    "000000204",    // 3 et 3 et 1 et 1 et 1 et 1

                    "000000050",    // 2 et 2 et 2 et 2 et 2
                    "000000042",    // 2 et 2 et 2 et 2 et 1 et 1
                    "000000034",    // 2 et 2 et 2 et 1 et 1 et 1 et 1
                    "000000026",    // 2 et 2 et 1 et 1 et 1 et 1 et 1 et 1
                    "000000018",    // 2 et 1 et 1 et 1 et 1 et 1 et 1 et 1 et 1

                    // Somme optimise = 9
                    "010000001",    // 8 et 1
                    "001000010",    // 7 et 2
                    "001000002",    // 7 et 1 et 1
                    "000100100",    // 6 et 3
                    "000100011",    // 6 et 2 et 1
                    "000100003",    // 6 et 1 * 3
                    "000011000",    // 5 et 4
                    "000010101",    // 5 et 3 et 1
                    "000010020",    // 5 et 2 et 2
                    "000010013",    // 5 et 2 et 1 * 3
                    "000002001",    // 4 et 4 et 1
                    "000001110",    // 4 et 3 et 2
                    "000001102",    // 4 et 3 et 1 et 1
                    "000001021",    // 4 et 2 et 2 et 1
                    "000001013",    // 4 et 2 et 1 * 3
                    "000001005",    // 4 et 1 et 1 et 1 et 1 et 1
                    "000000300",    // 3 et 3 et 3
                    "000000211",    // 3 et 3 et 2 et 1
                    "000000203",    // 3 et 3 et 1 et 1 et 1
                    "000000041",    // 2 et 2 et 2 et 2 et 1
                    "000000033",    // 2 et 2 et 2 et 1 et 1 et 1
                    "000000025",    // 2 et 2 et 1 * 5
                    "000000009",    // 1 * 9

                    // Somme optimise = 8
                    "010000000",    // 8
                    "001000001",    // 7 et 1
                    "000100010",    // 6 et 2
                    "000100002",    // 6 et 1 * 2
                    "000010100",    // 5 et 3
                    "000010011",    // 5 et 2 et 1
                    "000002000",    // 4 et 4
                    "000001101",    // 4 et 3 et 1
                    "000001020",    // 4 et 2 et 2
                    "000001004",    // 4 et 1 * 4
                    "000000202",    // 3 et 3 et 1 et 1
                    "000000213",    // 3 et 2 et 1 et 1 et 1
                    "000000205",    // 3 et 1 et 1 et 1 et 1 et 1
                    "000000032",    // 2 et 2 et 2 et 1 et 1
                    "000000024",    // 2 et 2 et 1 et 1 et 1 et 1
                    "000000008",    // 1 * 8


                    // Somme optimise = 7
                    "001000000",    // 7
                    "000100001",    // 6 et 1
                    "000010010",    // 5 et 2
                    "000010002",    // 5 et 1 * 2
                    "000001100",    // 4 et 3
                    "000001011",    // 4 et 2 et 1
                    "000001003",    // 4 et 1 * 3
                    "000000201",    // 3 et 3 et 1
                    "000000212",    // 3 et 2 et 1 et 1
                    "000000204",    // 3 et 1 et 1 et 1 et 1
                    "000000031",    // 2 et 2 et 2 et 1
                    "000000023",    // 2 et 2 et 1 et 1 et 1
                    "000000007",    // 1 * 7

                    // Somme optimise = 6
                    "000100000",    // 6
                    "000010001",    // 5 et 1
                    "000001010",    // 4 et 2
                    "000000200",    // 3 et 3
                    "000000111",    // 3 et 2 et 1
                    "000000030",    // 2 et 2 et 2
                    "000000022",    // 2 et 2 et 1 et 1
                    "000000015",    // 2 et 1 * 5

                    // Somme optimise = 5
                    "000010000",    // 5
                    "000001001",    // 4 et 1
                    "000000110",    // 3 et 2
                    "000000102",    // 3 et 1 et 1
                    "000000013",    // 2 et 1 * 3
                    "000000005",    // 1 * 5

                    // Somme optimise = 4
                    "000001000",    // 4
                    "000000101",    // 3 et 1
                    "000000020",    // 2 et 2
                    "000000012",    // 2 et 1 et 1
                    "000000004",    // 1 * 4

                    // Somme optimise = 3
                    "000000100",    // 3
                    "000000011",    // 2 et 1
                    "000000003",    // 1 * 3
                    // Somme optimise = 2
                    "000000002",    // 1 * 2
                    "000000001",    // 1

            };

    public final static int LENGTH = DEFINITIONS[0].length();

}
